From 1c3699443060f0ac1e780fddc38483831235026a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michael=20M=C3=BCller?= <michael@fds-team.de>
Date: Sat, 16 Apr 2016 18:18:54 +0200
Subject: [PATCH] wined3d: Add stubs for QUERY_TYPE_SO_STATISTICS and
 QUERY_TYPE_SO_OVERFLOW.

---
 dlls/d3d10core/tests/d3d10core.c |   4 +-
 dlls/d3d11/tests/d3d11.c         |   4 +-
 dlls/wined3d/query.c             | 100 +++++++++++++++++++++++++++++++
 3 files changed, 104 insertions(+), 4 deletions(-)

diff --git a/dlls/d3d10core/tests/d3d10core.c b/dlls/d3d10core/tests/d3d10core.c
index 2100a6611e5..1d84cc8e269 100644
--- a/dlls/d3d10core/tests/d3d10core.c
+++ b/dlls/d3d10core/tests/d3d10core.c
@@ -4322,8 +4322,8 @@ static void test_create_query(void)
         {D3D10_QUERY_TIMESTAMP_DISJOINT,    FALSE, FALSE},
         {D3D10_QUERY_PIPELINE_STATISTICS,   FALSE, FALSE},
         {D3D10_QUERY_OCCLUSION_PREDICATE,   TRUE,  FALSE},
-        {D3D10_QUERY_SO_STATISTICS,         FALSE, TRUE},
-        {D3D10_QUERY_SO_OVERFLOW_PREDICATE, TRUE,  TRUE},
+        {D3D10_QUERY_SO_STATISTICS,         FALSE, FALSE},
+        {D3D10_QUERY_SO_OVERFLOW_PREDICATE, TRUE,  FALSE},
     };
 
     ULONG refcount, expected_refcount;
diff --git a/dlls/d3d11/tests/d3d11.c b/dlls/d3d11/tests/d3d11.c
index c499c8401e4..c688ad4f7e5 100644
--- a/dlls/d3d11/tests/d3d11.c
+++ b/dlls/d3d11/tests/d3d11.c
@@ -5249,8 +5249,8 @@ static void test_create_query(void)
         {D3D11_QUERY_TIMESTAMP_DISJOINT,            D3D_FEATURE_LEVEL_10_0, FALSE, FALSE, FALSE},
         {D3D11_QUERY_PIPELINE_STATISTICS,           D3D_FEATURE_LEVEL_10_0, FALSE, FALSE, FALSE},
         {D3D11_QUERY_OCCLUSION_PREDICATE,           D3D_FEATURE_LEVEL_10_0, TRUE,  TRUE,  FALSE},
-        {D3D11_QUERY_SO_STATISTICS,                 D3D_FEATURE_LEVEL_10_0, FALSE, FALSE, TRUE},
-        {D3D11_QUERY_SO_OVERFLOW_PREDICATE,         D3D_FEATURE_LEVEL_10_0, TRUE,  TRUE,  TRUE},
+        {D3D11_QUERY_SO_STATISTICS,                 D3D_FEATURE_LEVEL_10_0, FALSE, FALSE, FALSE},
+        {D3D11_QUERY_SO_OVERFLOW_PREDICATE,         D3D_FEATURE_LEVEL_10_0, TRUE,  TRUE,  FALSE},
         {D3D11_QUERY_SO_STATISTICS_STREAM0,         D3D_FEATURE_LEVEL_11_0, FALSE, FALSE, FALSE},
         {D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0, D3D_FEATURE_LEVEL_11_0, TRUE,  FALSE, TRUE},
         {D3D11_QUERY_SO_STATISTICS_STREAM1,         D3D_FEATURE_LEVEL_11_0, FALSE, FALSE, FALSE},
diff --git a/dlls/wined3d/query.c b/dlls/wined3d/query.c
index 01e6bcb9905..1eb35306b9a 100644
--- a/dlls/wined3d/query.c
+++ b/dlls/wined3d/query.c
@@ -920,6 +920,34 @@ static BOOL wined3d_pipeline_query_ops_issue(struct wined3d_query *query, DWORD
     return poll;
 }
 
+static BOOL wined3d_statistics_query_ops_poll(struct wined3d_query *query, DWORD flags)
+{
+    TRACE("query %p, flags %#x.\n", query, flags);
+
+    return TRUE;
+}
+
+static BOOL wined3d_statistics_query_ops_issue(struct wined3d_query *query, DWORD flags)
+{
+    FIXME("query %p, flags %#x.\n", query, flags);
+
+    return FALSE;
+}
+
+static BOOL wined3d_overflow_query_ops_poll(struct wined3d_query *query, DWORD flags)
+{
+    TRACE("query %p, flags %#x.\n", query, flags);
+
+    return TRUE;
+}
+
+static BOOL wined3d_overflow_query_ops_issue(struct wined3d_query *query, DWORD flags)
+{
+    FIXME("query %p, flags %#x.\n", query, flags);
+
+    return FALSE;
+}
+
 static void wined3d_event_query_ops_destroy(struct wined3d_query *query)
 {
     struct wined3d_event_query *event_query = wined3d_event_query_from_query(query);
@@ -1204,6 +1232,72 @@ static HRESULT wined3d_pipeline_query_create(struct wined3d_device *device,
     return WINED3D_OK;
 }
 
+static void wined3d_statistics_query_ops_destroy(struct wined3d_query *query)
+{
+    HeapFree(GetProcessHeap(), 0, query);
+}
+
+static const struct wined3d_query_ops statistics_query_ops =
+{
+    wined3d_statistics_query_ops_poll,
+    wined3d_statistics_query_ops_issue,
+    wined3d_statistics_query_ops_destroy,
+};
+
+static HRESULT wined3d_statistics_query_create(struct wined3d_device *device,
+        enum wined3d_query_type type, void *parent, const struct wined3d_parent_ops *parent_ops,
+        struct wined3d_query **query)
+{
+    static const struct wined3d_query_data_so_statistics statistics = { 1, 1 };
+    struct wined3d_query *object;
+
+    FIXME("device %p, type %#x, parent %p, query %p.\n", device, type, parent, query);
+
+    if (!(object = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(*object))))
+        return E_OUTOFMEMORY;
+
+    wined3d_query_init(object, device, type, &statistics,
+            sizeof(statistics), &statistics_query_ops, parent, parent_ops);
+
+    TRACE("Created query %p.\n", object);
+    *query = object;
+
+    return WINED3D_OK;
+}
+
+static void wined3d_overflow_query_ops_destroy(struct wined3d_query *query)
+{
+    HeapFree(GetProcessHeap(), 0, query);
+}
+
+static const struct wined3d_query_ops overflow_query_ops =
+{
+    wined3d_overflow_query_ops_poll,
+    wined3d_overflow_query_ops_issue,
+    wined3d_overflow_query_ops_destroy,
+};
+
+static HRESULT wined3d_overflow_query_create(struct wined3d_device *device,
+        enum wined3d_query_type type, void *parent, const struct wined3d_parent_ops *parent_ops,
+        struct wined3d_query **query)
+{
+    static const BOOL overflow = FALSE;
+    struct wined3d_query *object;
+
+    FIXME("device %p, type %#x, parent %p, query %p.\n", device, type, parent, query);
+
+    if (!(object = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, sizeof(*object))))
+        return E_OUTOFMEMORY;
+
+    wined3d_query_init(object, device, type, &overflow,
+            sizeof(overflow), &overflow_query_ops, parent, parent_ops);
+
+    TRACE("Created query %p.\n", object);
+    *query = object;
+
+    return WINED3D_OK;
+}
+
 HRESULT CDECL wined3d_query_create(struct wined3d_device *device, enum wined3d_query_type type,
         void *parent, const struct wined3d_parent_ops *parent_ops, struct wined3d_query **query)
 {
@@ -1234,6 +1328,12 @@ HRESULT CDECL wined3d_query_create(struct wined3d_device *device, enum wined3d_q
         case WINED3D_QUERY_TYPE_PIPELINE_STATISTICS:
             return wined3d_pipeline_query_create(device, type, parent, parent_ops, query);
 
+        case WINED3D_QUERY_TYPE_SO_STATISTICS:
+            return wined3d_statistics_query_create(device, type, parent, parent_ops, query);
+
+        case WINED3D_QUERY_TYPE_SO_OVERFLOW:
+            return wined3d_overflow_query_create(device, type, parent, parent_ops, query);
+
         default:
             FIXME("Unhandled query type %#x.\n", type);
             return WINED3DERR_NOTAVAILABLE;
-- 
2.18.0

